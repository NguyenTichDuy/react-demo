/*! For license information please see index.a023713d611558e18a09.js.LICENSE.txt */
!function(){"use strict";var t,e,n,r={6540:function(t,e,n){var r=n(7294),o=n(745),i=n(9711),a=n(3379),c=n.n(a),u=n(7795),s=n.n(u),l=n(569),f=n.n(l),h=n(3565),d=n.n(h),p=n(9216),v=n.n(p),y=n(4589),m=n.n(y),g=n(3562),x={};x.styleTagTransform=m(),x.setAttributes=d(),x.insert=f().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=v(),c()(g.Z,x),g.Z&&g.Z.locals&&g.Z.locals;var b=n(6974),j=n(3471),w=n(8527),E=n(5893),S=function(t){var e=t.chilren;return(0,E.jsxs)(w.xu,{position:"relative",children:[(0,E.jsx)(w.X6,{as:"h1",size:"4xl",zIndex:0,children:e}),(0,E.jsx)(w.iz,{size:"lg",border:"8px",borderColor:"orange",position:"absolute",bottom:"3",zIndex:-1})]})},O=n(4651),C=function(t){var e=t.src,n=t.alt,r=t.price;return(0,E.jsxs)(w.xu,{children:[(0,E.jsx)(O.Ee,{src:e.original}),(0,E.jsx)(w.xv,{children:n}),(0,E.jsx)(w.xv,{color:"orange",children:r})]})},A=function(t){var e=t.products;return(0,E.jsx)(w.gC,{children:(0,E.jsx)(w.rj,{templateColumns:"repeat(4, 1fr)",gap:6,children:null==e?void 0:e.map((function(t){return(0,E.jsx)(C,{alt:t.alt,price:"$12.00",src:t.src})}))})})},L=function(t){var e=t.products,n=t.title;return(0,E.jsxs)(w.gC,{spacing:"8",children:[(0,E.jsx)(S,{chilren:n}),(0,E.jsx)(A,{products:e})]})};function _(t){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_(t)}function k(){k=function(){return t};var t={},e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),a=new E(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=b(a,n);if(c){if(c===l)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(t,e,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function s(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var l={};function f(){}function h(){}function d(){}var p={};c(p,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(S([])));y&&y!==e&&n.call(y,o)&&(p=y);var m=d.prototype=f.prototype=Object.create(p);function g(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function r(o,i,a,c){var u=s(t[o],t,i);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==_(f)&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,c)}))}c(u.arg)}var o;this._invoke=function(t,n){function i(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(i,i):i()}}function b(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return l;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=s(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,l;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,l):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,l)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function w(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,c(m,"constructor",d),c(d,"constructor",h),h.displayName=c(d,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,c(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(x.prototype),c(x.prototype,i,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new x(u(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),c(m,a,"Generator"),c(m,o,(function(){return this})),c(m,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=S,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),l},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),w(n),l}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;w(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}},t}function P(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}var T=new URL("https://api.pexels.com/v1/search"),N=function(){var t,e=(t=k().mark((function t(e){var n,r,o,i;return k().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.method,r=e.params,o=e.pathname,T.search=new URLSearchParams(r).toString(),T.pathname="/v1/"+o,t.next=5,fetch(T,{method:n,headers:{"Content-Type":"application/json",Authorization:"563492ad6f91700001000001b61382187ea546f0a1587d00d525bdca"}});case 5:return i=t.sent,t.abrupt("return",i.json());case 7:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){P(i,r,o,a,c,"next",t)}function c(t){P(i,r,o,a,c,"throw",t)}a(void 0)}))});return function(t){return e.apply(this,arguments)}}(),I=function(){var t={query:"tshirt",per_page:"40"},e=(0,j.useQuery)(["products"],(function(){return N({params:t,method:"GET",pathname:"search"})})),n=e.data;return e.error,(0,E.jsx)(L,{products:null==n?void 0:n.photos,title:"SHOP ALL"})},M=function(){return(0,E.jsx)(b.Z5,{children:(0,E.jsx)(b.AW,{path:"/",element:(0,E.jsx)(I,{})})})},U=n(8468),z=n(7657),F=function(){return(0,E.jsxs)(w.Ug,{children:[(0,E.jsx)(z.qE,{bg:"black",size:"xs"}),(0,E.jsx)(w.xv,{children:"Log In"})]})},G=function(){return(0,E.jsx)(w.xu,{bg:"black",paddingX:3,paddingY:2,children:(0,E.jsx)(w.X6,{as:"h3",size:"md",color:"white",children:"N O U S"})})},Z=n(5193),R=[{name:"Shop All",link:"/"},{name:"Women",link:"/"},{name:"Men",link:"/"},{name:"Sale",link:"/"},{name:"About",link:"/"},{name:"Contact",link:"/"}],B=function(){return(0,E.jsx)(w.Ug,{children:R.map((function(t){var e=t.link,n=t.name;return(0,E.jsx)(Z.zx,{variant:"link",children:(0,E.jsx)(i.rU,{to:e,children:n})})}))})},W=n(319),Y=n(9876),H=function(){return(0,E.jsxs)(W.BZ,{variant:"flushed",children:[(0,E.jsx)(W.Z8,{children:(0,E.jsx)(Y.GV,{})}),(0,E.jsx)(W.II,{placeholder:"Search..."})]})},Q=function(){return(0,E.jsxs)(w.rj,{templateColumns:"repeat(6, 1fr)",justifyContent:"center",gap:4,bg:"white",children:[(0,E.jsx)(w.P4,{colStart:1,colEnd:3,children:(0,E.jsxs)(w.Ug,{children:[(0,E.jsx)(G,{}),(0,E.jsx)(H,{})]})}),(0,E.jsx)(w.P4,{colStart:4,colEnd:7,display:"flex",children:(0,E.jsxs)(w.Ug,{children:[(0,E.jsx)(B,{}),(0,E.jsx)(F,{})]})})]})},X=new j.QueryClient({}),q=(0,U.B1C)({colors:{brand:{900:"#1a365d",800:"#153e75",700:"#2a69ac"}},fonts:{heading:"avenir-lt-w01_35-light1475496,avenir-lt-w05_35-light,sans-serif",body:"avenir-lt-w01_35-light1475496,avenir-lt-w05_35-light,sans-serif"}}),D=function(){return(0,E.jsx)(j.QueryClientProvider,{client:X,children:(0,E.jsx)(U.xjn,{theme:q,children:(0,E.jsxs)(w.W2,{maxW:"container.lg",children:[(0,E.jsx)(Q,{}),(0,E.jsx)(w.xu,{paddingTop:16,children:(0,E.jsx)(M,{})})]})})})},V=document.getElementById("root");o.createRoot(V).render((0,E.jsx)(r.StrictMode,{children:(0,E.jsx)(i.VK,{children:(0,E.jsx)(D,{})})}))},3562:function(t,e,n){var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([t.id,'body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",\n    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n',"",{version:3,sources:["webpack://./public/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:['body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",\n    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n'],sourceRoot:""}]),e.Z=a}},o={};function i(t){var e=o[t];if(void 0!==e)return e.exports;var n=o[t]={id:t,loaded:!1,exports:{}};return r[t].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}i.m=r,t=[],i.O=function(e,n,r,o){if(!n){var a=1/0;for(l=0;l<t.length;l++){n=t[l][0],r=t[l][1],o=t[l][2];for(var c=!0,u=0;u<n.length;u++)(!1&o||a>=o)&&Object.keys(i.O).every((function(t){return i.O[t](n[u])}))?n.splice(u--,1):(c=!1,o<a&&(a=o));if(c){t.splice(l--,1);var s=r();void 0!==s&&(e=s)}}return e}o=o||0;for(var l=t.length;l>0&&t[l-1][2]>o;l--)t[l]=t[l-1];t[l]=[n,r,o]},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,{a:e}),e},n=Object.getPrototypeOf?function(t){return Object.getPrototypeOf(t)}:function(t){return t.__proto__},i.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var o=Object.create(null);i.r(o);var a={};e=e||[null,n({}),n([]),n(n)];for(var c=2&r&&t;"object"==typeof c&&!~e.indexOf(c);c=n(c))Object.getOwnPropertyNames(c).forEach((function(e){a[e]=function(){return t[e]}}));return a.default=function(){return t},i.d(o,a),o},i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=function(t){return t.paths=[],t.children||(t.children=[]),t},function(){var t={826:0};i.O.j=function(e){return 0===t[e]};var e=function(e,n){var r,o,a=n[0],c=n[1],u=n[2],s=0;if(a.some((function(e){return 0!==t[e]}))){for(r in c)i.o(c,r)&&(i.m[r]=c[r]);if(u)var l=u(i)}for(e&&e(n);s<a.length;s++)o=a[s],i.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return i.O(l)},n=self.webpackChunkreact_demo=self.webpackChunkreact_demo||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))}(),i.nc=void 0;var a=i.O(void 0,[279],(function(){return i(6540)}));a=i.O(a)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QW9CMEUsUUFBS3ZFLEVDR3pCLElBQUl3RSxFQUFzQjNFLEVBQW9CUyxPQUFFTixFQUFXLENBQUMsTUFBTSxXQUFhLE9BQU9ILEVBQW9CLFNBQzFHMkUsRUFBc0IzRSxFQUFvQlMsRUFBRWtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QtZGVtby93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3JlYWN0LWRlbW8vd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3B1YmxpYy9pbmRleC5jc3M/Mzk1YSIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvbW9sZWN1bGVzL1RpdGxlL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvbW9sZWN1bGVzL3Byb2R1Y3QtaXRlbS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3NyYy9jb21wb25lbnRzL29yZ2FuaXNtcy9wcm9kdWN0cy1saXN0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvdGVtcGxhdGVzL1Nob3BBbGwvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LWRlbW8vLi9zcmMvY29uZmlnL2ZldGNoLWFwaS50cyIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL3BhZ2VzL2hvbWUvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LWRlbW8vLi9zcmMvcm91dGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvbW9sZWN1bGVzL2xvZ2luLWF2YXRhci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3NyYy9jb21wb25lbnRzL21vbGVjdWxlcy9sb2dvL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvbW9sZWN1bGVzL25hdmlnYXRlL2RhdGEudHMiLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3NyYy9jb21wb25lbnRzL21vbGVjdWxlcy9uYXZpZ2F0ZS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3NyYy9jb21wb25lbnRzL21vbGVjdWxlcy9zZWFyY2gtaW5wdXQvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LWRlbW8vLi9zcmMvY29tcG9uZW50cy9vcmdhbmlzbXMvU2hvcC1hbGwtaGVhZGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vLy4vc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby8uL3NyYy90aGVtZXMvZ2xvYmFsLnRzIiwid2VicGFjazovL3JlYWN0LWRlbW8vLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL3JlYWN0LWRlbW8vLi9wdWJsaWMvaW5kZXguY3NzIiwid2VicGFjazovL3JlYWN0LWRlbW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlYWN0LWRlbW8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vcmVhY3QtZGVtby93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9yZWFjdC1kZW1vL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IGZ1bmN0aW9uKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgY2h1bmtJZHMgPSBkZWZlcnJlZFtpXVswXTtcblx0XHR2YXIgZm4gPSBkZWZlcnJlZFtpXVsxXTtcblx0XHR2YXIgcHJpb3JpdHkgPSBkZWZlcnJlZFtpXVsyXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoZnVuY3Rpb24oa2V5KSB7IHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSk7IH0pKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTsgfSA6IGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gb2JqLl9fcHJvdG9fXzsgfTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7IGRlZltrZXldID0gZnVuY3Rpb24oKSB7IHJldHVybiB2YWx1ZVtrZXldOyB9OyB9KTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdmFsdWU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBCb3gsIERpdmlkZXIsIEhlYWRpbmcgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuXG5pbnRlcmZhY2UgVGl0bGVQcm9wcyB7XG4gIGNoaWxyZW46IHN0cmluZztcbn1cblxuY29uc3QgVGl0bGUgPSAoeyBjaGlscmVuIH06IFRpdGxlUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Qm94IHBvc2l0aW9uPVwicmVsYXRpdmVcIj5cbiAgICAgIDxIZWFkaW5nIGFzPXtcImgxXCJ9IHNpemU9e1wiNHhsXCJ9IHpJbmRleD17MH0+XG4gICAgICAgIHtjaGlscmVufVxuICAgICAgPC9IZWFkaW5nPlxuICAgICAgPERpdmlkZXJcbiAgICAgICAgc2l6ZT17XCJsZ1wifVxuICAgICAgICBib3JkZXI9e1wiOHB4XCJ9XG4gICAgICAgIGJvcmRlckNvbG9yPXtcIm9yYW5nZVwifVxuICAgICAgICBwb3NpdGlvbj17XCJhYnNvbHV0ZVwifVxuICAgICAgICBib3R0b209e1wiM1wifVxuICAgICAgICB6SW5kZXg9ey0xfVxuICAgICAgLz5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpdGxlO1xuIiwiaW1wb3J0IHsgQm94LCBJbWFnZSwgVGV4dCB9IGZyb20gXCJAY2hha3JhLXVpL3JlYWN0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZUltYWdlIHtcbiAgb3JpZ2luYWw6IHN0cmluZztcbiAgbWVkaXVtOiBzdHJpbmc7XG4gIGxhcmdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZHVjdEl0ZW1Qcm9wcyB7XG4gIHNyYzogU2l6ZUltYWdlO1xuICBhbHQ6IHN0cmluZztcbiAgcHJpY2U6IHN0cmluZztcbn1cblxuY29uc3QgUHJvZHVjdEl0ZW0gPSAoeyBzcmMsIGFsdCwgcHJpY2UgfTogUHJvZHVjdEl0ZW1Qcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3g+XG4gICAgICA8SW1hZ2Ugc3JjPXtzcmMub3JpZ2luYWx9IC8+XG4gICAgICA8VGV4dD57YWx0fTwvVGV4dD5cbiAgICAgIDxUZXh0IGNvbG9yPXtcIm9yYW5nZVwifT57cHJpY2V9PC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdEl0ZW07XG4iLCJpbXBvcnQgeyBHcmlkLCBWU3RhY2sgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuaW1wb3J0IFByb2R1Y3RJdGVtLCB7XG4gIFByb2R1Y3RJdGVtUHJvcHMsXG59IGZyb20gXCJDb21wb25lbnRzL21vbGVjdWxlcy9wcm9kdWN0LWl0ZW1cIjtcblxuaW50ZXJmYWNlIFByb2R1Y3RzTGlzdFByb3BzIHtcbiAgcHJvZHVjdHM6IFByb2R1Y3RJdGVtUHJvcHNbXSB8IHVuZGVmaW5lZDtcbn1cbmNvbnN0IFByb2R1Y3RzTGlzdCA9ICh7IHByb2R1Y3RzIH06IFByb2R1Y3RzTGlzdFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFZTdGFjaz5cbiAgICAgIDxHcmlkIHRlbXBsYXRlQ29sdW1ucz1cInJlcGVhdCg0LCAxZnIpXCIgZ2FwPXs2fT5cbiAgICAgICAge3Byb2R1Y3RzPy5tYXAoKHZhbCkgPT4gKFxuICAgICAgICAgIDxQcm9kdWN0SXRlbSBhbHQ9e3ZhbC5hbHR9IHByaWNlPXtcIiQxMi4wMFwifSBzcmM9e3ZhbC5zcmN9IC8+XG4gICAgICAgICkpfVxuICAgICAgPC9HcmlkPlxuICAgIDwvVlN0YWNrPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdHNMaXN0O1xuIiwiaW1wb3J0IHsgQ29udGFpbmVyLCBWU3RhY2sgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuaW1wb3J0IHsgUHJvZHVjdEl0ZW1Qcm9wcyB9IGZyb20gXCJDb21wb25lbnRzL21vbGVjdWxlcy9wcm9kdWN0LWl0ZW1cIjtcbmltcG9ydCBUaXRsZSBmcm9tIFwiQ29tcG9uZW50cy9tb2xlY3VsZXMvVGl0bGVcIjtcbmltcG9ydCBQcm9kdWN0c0xpc3QgZnJvbSBcIkNvbXBvbmVudHMvb3JnYW5pc21zL3Byb2R1Y3RzLWxpc3RcIjtcbmltcG9ydCBTaG9wQWxsSGVhZGVyIGZyb20gXCJDb21wb25lbnRzL29yZ2FuaXNtcy9TaG9wLWFsbC1oZWFkZXJcIjtcblxuaW50ZXJmYWNlIFByb2R1Y3RMaXN0UHJvcHMge1xuICBwcm9kdWN0czogUHJvZHVjdEl0ZW1Qcm9wc1tdIHwgdW5kZWZpbmVkO1xuICB0aXRsZTogc3RyaW5nO1xufVxuXG5jb25zdCBTaG9wQWxsID0gKHsgcHJvZHVjdHMsIHRpdGxlIH06IFByb2R1Y3RMaXN0UHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VlN0YWNrIHNwYWNpbmc9e1wiOFwifT5cbiAgICAgIDxUaXRsZSBjaGlscmVuPXt0aXRsZX0gLz5cbiAgICAgIDxQcm9kdWN0c0xpc3QgcHJvZHVjdHM9e3Byb2R1Y3RzfSAvPlxuICAgIDwvVlN0YWNrPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2hvcEFsbDtcbiIsImNvbnN0IHRva2VuID0gXCI1NjM0OTJhZDZmOTE3MDAwMDEwMDAwMDFiNjEzODIxODdlYTU0NmYwYTE1ODdkMDBkNTI1YmRjYVwiO1xuY29uc3QgdXJsID0gbmV3IFVSTChcImh0dHBzOi8vYXBpLnBleGVscy5jb20vdjEvc2VhcmNoXCIpO1xuY29uc3QgcGF0aE5hbWUgPSBcIi92MS9cIjtcblxudHlwZSBNZXRob2RUeXBlID0gXCJHRVRcIiB8IFwiUE9TVFwiO1xuXG5pbnRlcmZhY2UgRmV0Y2hEYXRhVHlwZSB7XG4gIG1ldGhvZDogTWV0aG9kVHlwZTtcbiAgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBwYXRobmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKHtcbiAgbWV0aG9kLFxuICBwYXJhbXMsXG4gIHBhdGhuYW1lLFxufTogRmV0Y2hEYXRhVHlwZSkgPT4ge1xuICB1cmwuc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpLnRvU3RyaW5nKCk7XG4gIHVybC5wYXRobmFtZSA9IHBhdGhOYW1lICsgcGF0aG5hbWU7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBBdXRob3JpemF0aW9uOiB0b2tlbixcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn07XG4iLCJpbXBvcnQgeyBCb3ggfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgU2hvcEFsbCBmcm9tIFwiQ29tcG9uZW50cy90ZW1wbGF0ZXMvU2hvcEFsbFwiO1xuaW1wb3J0IHsgZmV0Y2hEYXRhIH0gZnJvbSBcIkNvbmZpZy9mZXRjaC1hcGlcIjtcblxuaW50ZXJmYWNlIFByb2R1Y3RzSXRlbVJlc3BvbnNlIHtcbiAgcGFnZTogbnVtYmVyO1xuICBwZXJfcGFnZTogbnVtYmVyO1xuICBwaG90b3M6IGFueTtcbn1cbmNvbnN0IGhvbWUgPSAoKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBxdWVyeTogXCJ0c2hpcnRcIixcbiAgICBwZXJfcGFnZTogXCI0MFwiLFxuICB9O1xuICBjb25zdCBnZXRQcm9kdWN0c0FwaSA9ICgpID0+XG4gICAgZmV0Y2hEYXRhKHsgcGFyYW1zLCBtZXRob2Q6IFwiR0VUXCIsIHBhdGhuYW1lOiBcInNlYXJjaFwiIH0pO1xuICBjb25zdCB7IGRhdGE6IGdldERhdGEsIGVycm9yIH0gPSB1c2VRdWVyeTxQcm9kdWN0c0l0ZW1SZXNwb25zZT4oXG4gICAgW1wicHJvZHVjdHNcIl0sXG4gICAgZ2V0UHJvZHVjdHNBcGlcbiAgKTtcbiAgcmV0dXJuIDxTaG9wQWxsIHByb2R1Y3RzPXtnZXREYXRhPy5waG90b3N9IHRpdGxlPVwiU0hPUCBBTExcIiAvPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhvbWU7XG4iLCJpbXBvcnQgeyBSb3V0ZSwgUm91dGVzIGFzIFJvdXRlckxpc3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IEhvbWUgZnJvbSBcIlBhZ2VzL2hvbWVcIjtcblxuY29uc3QgUm91dGVycyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyTGlzdD5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxuICAgIDwvUm91dGVyTGlzdD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcnM7XG4iLCJpbXBvcnQgeyBBdmF0YXIsIEJveCwgSFN0YWNrLCBJY29uLCBUZXh0IH0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIjtcblxuY29uc3QgTG9naW5BdmF0YXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEhTdGFjaz5cbiAgICAgIDxBdmF0YXIgYmc9e1wiYmxhY2tcIn0gc2l6ZT17XCJ4c1wifSAvPlxuICAgICAgPFRleHQ+TG9nIEluPC9UZXh0PlxuICAgIDwvSFN0YWNrPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW5BdmF0YXI7XG4iLCJpbXBvcnQgeyBCb3gsIEhlYWRpbmcsIFRleHQgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuXG5jb25zdCBMb2dvID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3ggYmc9e1wiYmxhY2tcIn0gcGFkZGluZ1g9ezN9IHBhZGRpbmdZPXsyfT5cbiAgICAgIDxIZWFkaW5nIGFzPXtcImgzXCJ9IHNpemU9XCJtZFwiIGNvbG9yPXtcIndoaXRlXCJ9PlxuICAgICAgICBOIE8gVSBTXG4gICAgICA8L0hlYWRpbmc+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dvO1xuIiwiaW50ZXJmYWNlIG5hdmlnYXRlRGF0YVR5cGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxpbms6IHN0cmluZztcbn1cblxuY29uc3QgTkFWSUdBVEVfREFUQTogbmF2aWdhdGVEYXRhVHlwZVtdID0gW1xuICB7XG4gICAgbmFtZTogXCJTaG9wIEFsbFwiLFxuICAgIGxpbms6IFwiL1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJXb21lblwiLFxuICAgIGxpbms6IFwiL1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJNZW5cIixcbiAgICBsaW5rOiBcIi9cIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU2FsZVwiLFxuICAgIGxpbms6IFwiL1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBYm91dFwiLFxuICAgIGxpbms6IFwiL1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDb250YWN0XCIsXG4gICAgbGluazogXCIvXCIsXG4gIH0sXG5dO1xuXG5leHBvcnQgeyBOQVZJR0FURV9EQVRBIH07XG4iLCJpbXBvcnQgeyBCb3gsIEJ1dHRvbiwgSFN0YWNrIH0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgTkFWSUdBVEVfREFUQSB9IGZyb20gXCIuL2RhdGFcIjtcblxuY29uc3QgTmF2aWdhdGUgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEhTdGFjaz5cbiAgICAgIHtOQVZJR0FURV9EQVRBLm1hcCgoeyBsaW5rLCBuYW1lIH0pID0+IChcbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlua1wiPlxuICAgICAgICAgIDxMaW5rIHRvPXtsaW5rfT57bmFtZX08L0xpbms+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgKSl9XG4gICAgPC9IU3RhY2s+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0ZTtcbiIsImltcG9ydCB7IEhTdGFjaywgSW5wdXQsIElucHV0R3JvdXAsIElucHV0TGVmdEVsZW1lbnQgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiO1xuaW1wb3J0IHsgU2VhcmNoMkljb24gfSBmcm9tIFwiQGNoYWtyYS11aS9pY29uc1wiO1xuXG5jb25zdCBTZWFyY2hJbnB1dCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8SW5wdXRHcm91cCB2YXJpYW50PXtcImZsdXNoZWRcIn0+XG4gICAgICA8SW5wdXRMZWZ0RWxlbWVudD5cbiAgICAgICAgPFNlYXJjaDJJY29uIC8+XG4gICAgICA8L0lucHV0TGVmdEVsZW1lbnQ+XG4gICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9e1wiU2VhcmNoLi4uXCJ9IC8+XG4gICAgPC9JbnB1dEdyb3VwPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoSW5wdXQ7XG4iLCJpbXBvcnQgeyBCb3gsIEZsZXgsIEdyaWQsIEdyaWRJdGVtLCBIU3RhY2ssIFZTdGFjayB9IGZyb20gXCJAY2hha3JhLXVpL3JlYWN0XCI7XG5pbXBvcnQgTG9naW5BdmF0YXIgZnJvbSBcIkNvbXBvbmVudHMvbW9sZWN1bGVzL2xvZ2luLWF2YXRhclwiO1xuaW1wb3J0IExvZ28gZnJvbSBcIkNvbXBvbmVudHMvbW9sZWN1bGVzL2xvZ29cIjtcbmltcG9ydCBOYXZpZ2F0ZSBmcm9tIFwiQ29tcG9uZW50cy9tb2xlY3VsZXMvbmF2aWdhdGVcIjtcbmltcG9ydCBTZWFyY2hJbnB1dCBmcm9tIFwiQ29tcG9uZW50cy9tb2xlY3VsZXMvc2VhcmNoLWlucHV0XCI7XG5cbmNvbnN0IFNob3BBbGxIZWFkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEdyaWRcbiAgICAgIHRlbXBsYXRlQ29sdW1ucz1cInJlcGVhdCg2LCAxZnIpXCJcbiAgICAgIGp1c3RpZnlDb250ZW50PXtcImNlbnRlclwifVxuICAgICAgZ2FwPXs0fVxuICAgICAgLy8gcG9zaXRpb249e1wiZml4ZWRcIn1cbiAgICAgIGJnPXtcIndoaXRlXCJ9XG4gICAgPlxuICAgICAgPEdyaWRJdGVtIGNvbFN0YXJ0PXsxfSBjb2xFbmQ9ezN9PlxuICAgICAgICA8SFN0YWNrPlxuICAgICAgICAgIDxMb2dvIC8+XG4gICAgICAgICAgPFNlYXJjaElucHV0IC8+XG4gICAgICAgIDwvSFN0YWNrPlxuICAgICAgPC9HcmlkSXRlbT5cbiAgICAgIDxHcmlkSXRlbSBjb2xTdGFydD17NH0gY29sRW5kPXs3fSBkaXNwbGF5PVwiZmxleFwiPlxuICAgICAgICA8SFN0YWNrPlxuICAgICAgICAgIDxOYXZpZ2F0ZSAvPlxuICAgICAgICAgIDxMb2dpbkF2YXRhciAvPlxuICAgICAgICA8L0hTdGFjaz5cbiAgICAgIDwvR3JpZEl0ZW0+XG4gICAgPC9HcmlkPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2hvcEFsbEhlYWRlcjtcbiIsImltcG9ydCBSb3V0ZXJzIGZyb20gXCIuL3JvdXRlci9pbmRleFwiO1xuaW1wb3J0IHsgZXh0ZW5kVGhlbWUsIENoYWtyYVByb3ZpZGVyLCBDb250YWluZXIsIEJveCB9IGZyb20gXCJAY2hha3JhLXVpL3JlYWN0XCI7XG5pbXBvcnQgeyBjb2xvcnMsIGZvbnRzIH0gZnJvbSBcIlRoZW1lcy9nbG9iYWxcIjtcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IFNob3BBbGxIZWFkZXIgZnJvbSBcIkNvbXBvbmVudHMvb3JnYW5pc21zL1Nob3AtYWxsLWhlYWRlclwiO1xuXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCh7fSk7XG5jb25zdCB0aGVtZSA9IGV4dGVuZFRoZW1lKHsgY29sb3JzLCBmb250cyB9KTtcblxuZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgPENoYWtyYVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICAgIDxDb250YWluZXIgbWF4Vz17XCJjb250YWluZXIubGdcIn0+XG4gICAgICAgICAgPFNob3BBbGxIZWFkZXIgLz5cbiAgICAgICAgICA8Qm94IHBhZGRpbmdUb3A9ezE2fT5cbiAgICAgICAgICAgIDxSb3V0ZXJzIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgPC9DaGFrcmFQcm92aWRlcj5cbiAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImNvbnN0IGZvbnRzID0ge1xuICBoZWFkaW5nOiBgYXZlbmlyLWx0LXcwMV8zNS1saWdodDE0NzU0OTYsYXZlbmlyLWx0LXcwNV8zNS1saWdodCxzYW5zLXNlcmlmYCxcbiAgYm9keTogYGF2ZW5pci1sdC13MDFfMzUtbGlnaHQxNDc1NDk2LGF2ZW5pci1sdC13MDVfMzUtbGlnaHQsc2Fucy1zZXJpZmAsXG59O1xuXG5jb25zdCBjb2xvcnMgPSB7XG4gIGJyYW5kOiB7XG4gICAgOTAwOiBcIiMxYTM2NWRcIixcbiAgICA4MDA6IFwiIzE1M2U3NVwiLFxuICAgIDcwMDogXCIjMmE2OWFjXCIsXG4gIH0sXG59O1xuXG5leHBvcnQgeyBmb250cywgY29sb3JzIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFwiLi4vcHVibGljL2luZGV4LmNzc1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnQ7XG5jb25zdCByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChyb290RWxlbWVudCk7XG5yb290LnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPEJyb3dzZXJSb3V0ZXI+XG4gICAgICA8QXBwIC8+XG4gICAgPC9Ccm93c2VyUm91dGVyPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+XG4pO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFxcXCJSb2JvdG9cXFwiLCBcXFwiT3h5Z2VuXFxcIixcXG4gICAgXFxcIlVidW50dVxcXCIsIFxcXCJDYW50YXJlbGxcXFwiLCBcXFwiRmlyYSBTYW5zXFxcIiwgXFxcIkRyb2lkIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLFxcbiAgICBzYW5zLXNlcmlmO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiQ291cmllciBOZXdcXFwiLFxcbiAgICBtb25vc3BhY2U7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3B1YmxpYy9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxTQUFTO0VBQ1Q7O2NBRVk7RUFDWixtQ0FBbUM7RUFDbkMsa0NBQWtDO0FBQ3BDOztBQUVBO0VBQ0U7YUFDVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgXFxcIlJvYm90b1xcXCIsIFxcXCJPeHlnZW5cXFwiLFxcbiAgICBcXFwiVWJ1bnR1XFxcIiwgXFxcIkNhbnRhcmVsbFxcXCIsIFxcXCJGaXJhIFNhbnNcXFwiLCBcXFwiRHJvaWQgU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsXFxuICAgIHNhbnMtc2VyaWY7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJDb3VyaWVyIE5ld1xcXCIsXFxuICAgIG1vbm9zcGFjZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gZnVuY3Rpb24oY2h1bmtJZCkgeyByZXR1cm4gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwOyB9O1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IGZ1bmN0aW9uKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSB7XG5cdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG5cdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cdHZhciBydW50aW1lID0gZGF0YVsyXTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKGZ1bmN0aW9uKGlkKSB7IHJldHVybiBpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwOyB9KSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtyZWFjdF9kZW1vXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3JlYWN0X2RlbW9cIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzI3OV0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTQwKTsgfSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImNoaWxyZW4iLCJwb3NpdGlvbiIsImFzIiwic2l6ZSIsInpJbmRleCIsImJvcmRlciIsImJvcmRlckNvbG9yIiwiYm90dG9tIiwic3JjIiwiYWx0IiwicHJpY2UiLCJvcmlnaW5hbCIsImNvbG9yIiwicHJvZHVjdHMiLCJ0ZW1wbGF0ZUNvbHVtbnMiLCJnYXAiLCJtYXAiLCJ2YWwiLCJ0aXRsZSIsInNwYWNpbmciLCJ1cmwiLCJVUkwiLCJmZXRjaERhdGEiLCJtZXRob2QiLCJwYXJhbXMiLCJwYXRobmFtZSIsInNlYXJjaCIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwiZmV0Y2giLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInJlc3BvbnNlIiwianNvbiIsInF1ZXJ5IiwicGVyX3BhZ2UiLCJ1c2VRdWVyeSIsImdldERhdGEiLCJkYXRhIiwiZXJyb3IiLCJwaG90b3MiLCJwYXRoIiwiZWxlbWVudCIsImJnIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsIk5BVklHQVRFX0RBVEEiLCJuYW1lIiwibGluayIsInZhcmlhbnQiLCJ0byIsInBsYWNlaG9sZGVyIiwianVzdGlmeUNvbnRlbnQiLCJjb2xTdGFydCIsImNvbEVuZCIsImRpc3BsYXkiLCJxdWVyeUNsaWVudCIsIlF1ZXJ5Q2xpZW50IiwidGhlbWUiLCJleHRlbmRUaGVtZSIsImNvbG9ycyIsImJyYW5kIiwiZm9udHMiLCJoZWFkaW5nIiwiYm9keSIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJjbGllbnQiLCJtYXhXIiwicGFkZGluZ1RvcCIsInJvb3RFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0RE9NIiwicmVuZGVyIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImZ1bGZpbGxlZCIsImoiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImdldFByb3RvdHlwZU9mIiwib2JqIiwiX19wcm90b19fIiwidCIsInZhbHVlIiwibW9kZSIsInRoaXMiLCJ0aGVuIiwibnMiLCJjcmVhdGUiLCJkZWYiLCJjdXJyZW50IiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibm1kIiwicGF0aHMiLCJjaGlsZHJlbiIsImluc3RhbGxlZENodW5rcyIsImNodW5rSWQiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJiaW5kIiwibmMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==